{"version":3,"sources":["components/ImageCard/ImageCard.js","components/ImageGrid/ImageGrid.js","components/NavBar/NavBar.js","components/Jumbotron/Jumbotron.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Characters","props","CharacterList","sort","Math","random","gutter","map","res","xs","span","sm","md","lg","xl","className","onClick","src","alt","ImageGrid","handleImageClick","event","console","log","state","clicked","newScore","score","setState","message","topScore","this","Component","NavBar","Jumbotron","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"on4FAuBeA,G,MAlBI,SAACC,GAOhB,OAJIC,EAAcC,MAAK,kBAAMC,KAAKC,SAAW,MAKzC,kBAAC,MAAD,CAAKC,OAAQ,IACRJ,EAAcK,KAAI,SAAAC,GAAG,OAAI,kBAAC,MAAD,CACtBC,GAAI,CAAEC,KAAM,GAAKC,GAAI,CAAED,KAAM,GAAKE,GAAI,CAAEF,KAAM,GAAKG,GAAI,CAAEH,KAAM,GAAKI,GAAI,CAAEJ,KAAM,IAChF,yBAAKK,UAAU,iBAAiBC,QAASf,EAAMe,QAASC,IAAKT,EAAIS,IAAKC,IAAKV,EAAIU,aCqChFC,E,YA5CX,WAAYlB,GAAQ,IAAD,8BACf,4CAAMA,KASVmB,iBAAmB,SAAAC,GAEf,GADAC,QAAQC,IAAI,YACe,IAAvB,EAAKC,MAAMC,QAAmB,CAC9B,IAAIC,EAAW,EAAKF,MAAMG,MAAQ,EAClCL,QAAQC,IAAIG,GACZ,EAAKE,SAAS,CACVH,SAAS,EACTE,MAAOD,EACPG,QAAS,mBAGe,IAAvB,EAAKL,MAAMC,SAChB,EAAKG,SAAS,CACVD,MAAO,EACPE,QAAS,qCAtBjB,EAAKL,MAAQ,CACTC,SAAS,EACTE,MAAO,EACPG,SAAU,GACVD,QAAS,IANE,E,sEAmCf,OACI,6BACI,kBAAC,EAAD,CACIb,QAASe,KAAKX,wB,GAvCVY,aCgBTC,MApBf,WACE,OAEE,6BACE,yBAAKlB,UAAU,wBACb,yBAAKA,UAAU,kBACb,4CAEF,yBAAKA,UAAU,kBACb,4BAAKI,EAAUU,UAEjB,yBAAKd,UAAU,kBACb,qCAAWI,EAAUQ,W,MCGhBO,MAhBf,WACI,OACI,6BACI,yBAAKnB,UAAU,aACX,qDACA,0GCPhB,iCA0BeoB,MAxBf,WACI,OACI,6BAEI,yBAAKpB,UAAU,4BACX,yBAAKA,UAAU,aAEf,yBAAKA,UAAU,iBACX,wDAGJ,yBAAKA,UAAU,gBCIhBqB,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6ac879dd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport CharacterList from \"../../components/Characters.json\";\r\nimport { Row, Col } from 'react-simple-flex-grid';\r\nimport \"react-simple-flex-grid/lib/main.css\";\r\n\r\nconst Characters = (props) => {\r\n\r\n    const randomize = () => {\r\n        CharacterList.sort(() => Math.random() - 0.5)\r\n    }\r\n    randomize();\r\n\r\n    return (\r\n        <Row gutter={25}>\r\n            {CharacterList.map(res => <Col\r\n                xs={{ span: 4 }} sm={{ span: 3 }} md={{ span: 3 }} lg={{ span: 2 }} xl={{ span: 1 }}>\r\n                <img className=\"characterImage\" onClick={props.onClick} src={res.src} alt={res.alt}></img>\r\n            </Col>\r\n            )}\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Characters;","import React, { Component } from \"react\";\r\nimport \"./ImageGrid.css\";\r\n// import CharacterList from \"../../components/Characters.json\";\r\n// import Characters from \"../ImageCard/ImageCard\";\r\n// import ImageDiv from \"../ImageDiv/ImageDiv\";\r\nimport Characters from \"../ImageCard/ImageCard\";\r\n\r\n\r\nclass ImageGrid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clicked: false,\r\n            score: 0,\r\n            topScore: \"\",\r\n            message: \"\"\r\n        };\r\n    }\r\n\r\n    handleImageClick = event => {\r\n        console.log(\"clicked\");\r\n        if (this.state.clicked === false) {\r\n            let newScore = this.state.score + 1\r\n            console.log(newScore);\r\n            this.setState({\r\n                clicked: true,\r\n                score: newScore,\r\n                message: \"Good Job!\"\r\n            })\r\n        }\r\n        else if (this.state.clicked === true) {\r\n            this.setState({\r\n                score: 0,\r\n                message: \"You already clicked that image!\"\r\n\r\n            })\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Characters\r\n                    onClick={this.handleImageClick} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageGrid;","import React from \"react\";\r\nimport \"./NavBar.css\";\r\nimport ImageGrid from \"../ImageGrid/ImageGrid\";\r\n\r\nfunction NavBar() {\r\n  return (\r\n\r\n    <div>\r\n      <div className=\"row navbar fixed-top\">\r\n        <div className=\"col-md-4 label\">\r\n          <h2>Clicky-Game</h2>\r\n        </div>\r\n        <div className=\"col-md-4 label\">\r\n          <h2>{ImageGrid.message}</h2>\r\n        </div>\r\n        <div className=\"col-md-4 label\">\r\n          <h2>Score:{ImageGrid.score}</h2>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./Jumbotron.css\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div>\r\n            <div className=\"jumbotron\">\r\n                <h1>Star Wars Memory Game</h1>\r\n                <h3>Click on an image to earn points, but don't click on it more than once!</h3>\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport(\"./Footer.css\");\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div>\r\n\r\n            <div className=\"row footer sticky-bottom\">\r\n                <div className=\"col-4-md\">\r\n                </div>\r\n                <div className=\"col-4-md copy\">\r\n                    <p> \t&copy; Keith Naber 2019 </p>\r\n\r\n                </div>\r\n                <div className=\"col-4-md\">\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport NavBar from \"./components/NavBar/NavBar\";\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\nimport ImageGrid from './components/ImageGrid/ImageGrid';\nimport Footer from \"./components/Footer/Footer\";\n\nfunction App() {\n  return (\n    <div >\n      <NavBar />\n      <Jumbotron />\n      <ImageGrid />\n      <Footer />\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}